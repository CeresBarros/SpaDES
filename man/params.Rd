% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simList-accessors.R
\docType{methods}
\name{params}
\alias{p}
\alias{p,.simList-method}
\alias{params}
\alias{params,.simList-method}
\alias{params<-}
\alias{params<-,.simList-method}
\alias{simList-accessors-params}
\title{Get and set simulation parameters.}
\usage{
params(object)

\S4method{params}{.simList}(object)

params(object) <- value

\S4method{params}{.simList}(object) <- value

p(object, module = NULL, param = NULL)

\S4method{p}{.simList}(object, module = NULL, param = NULL)
}
\arguments{
\item{object}{A \code{simList} simulation object.}

\item{value}{The object to be stored at the slot.}

\item{module}{Optional character string indicating which module params should come from.}

\item{param}{Optional character string indicating which parameter to choose.}
}
\value{
Returns or sets the value of the slot from the \code{simList} object.
}
\description{
\code{params} and \code{p} access the parameter slot in the \code{simList}.
\code{params} has a replace method, so can be used to update a parameter value.

\code{p} is a concise way to access parameters within a module. It works more like
a namespaced function in the sense that the module from which it is called is the
default place it will look for the parameter. To access a parameter from within
a module, you can use \code{p(sim)$paramName} instead of
\code{params(sim)$moduleName$paramName}
}
\note{
The differences between p, params and being explicit with passing arguments
are mostly a question of speed and code compactness.
The computationally fastest way to get a parameter is to specify moduleName and parameter name, as in:
\code{p(sim, "moduleName", "paramName")} (replacing moduleName and paramName with your
specific module and parameter names), but it is more verbose than p(sim)$paramName. Note: the important
part for speed (e.g., 2-4x faster) is specifying the moduleName.
Specifying the parameter name is <5% faster.
}
\seealso{
\code{\link{SpaDES}}, specifically the section 1.2.1 on Simulation parameters.
}

