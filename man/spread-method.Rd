% Generated by roxygen2 (4.0.1): do not edit by hand
\docType{methods}
\name{spread}
\alias{spread}
\alias{spread,RasterLayer-method}
\title{Simulate a spread process on a landscape.}
\usage{
spread(landscape, loci, spreadProb, persistance, mask, maxSize, directions,
  iterations, ...)

\S4method{spread}{RasterLayer}(landscape, loci, spreadProb, persistance, mask,
  maxSize = ncell(landscape), directions = 8,
  iterations = ncell(landscape), mapID = FALSE, plot.it = FALSE, ...)
}
\arguments{
\item{landscape}{A \code{RasterLayer} object.}

\item{loci}{A vector of locations in \code{landscape}}

\item{spreadProb}{Numeric or rasterLayer. The overall probability of spreading, or probability raster
driven.}

\item{persistance}{A probability that a burning cell will continue to burn, per time step.}

\item{mask}{non-NULL, a \code{RasterLayer} object congruent with \code{landscape}
                     whose elements are \code{0,1}, where 1 indicates "cannot spread to".}

\item{maxSize}{The maximum number of pixels for a fire. This is currently
                     only a single number, not one for each spread event}

\item{directions}{The number adjacent cells in which to look; default is 8 (Queen case).}

\item{iterations}{Number of iterations to spread. Leaving this \code{NULL} allows the spread
                     to continue until stops spreading itself (i.e., exhausts itself).}

\item{...}{Additional parameters.}

\item{plot.it}{If TRUE, then plot the raster at every iteraction, so one can watch the
spread event grow.}

\item{mapID}{Logical. If TRUE, then the returned fire map is a map of fire ids. If FALSE,
the returned map is the iteration number that the pixel burned}
}
\value{
A \code{RasterLayer} indicating the spread of the process in the landscape.
}
\description{
This can be used to simulated fires or other things. Essentially, it starts from a collection of cells
(\code{loci}) and spreads to neighbours, according to the \code{directions} and \code{spreadProb} arguments.
This can become quite general, if \code{spreadProb} is 1 as it will expand from every loci until all pixels
in the landscape have been covered. With \code{mapID} set to \code{TRUE}, the resulting map will be
classified by the index of the pixel where that event propagated from. This can be used to examine things like
fire size distributions.
}
\examples{
library(raster)
library(RColorBrewer)

# Make random forest cover map
a <- raster(extent(0,1e2,0,1e2),res=1)
hab <- GaussMap(a,speedup=3)
names(hab)="hab"
cells <- loci <- b <- as.integer(sample(1:ncell(a),1e1))
mask <- raster(a)
mask <- setValues(mask, 0)
mask[1:5000] <- 1
numCol <- ncol(a)
numCell <- ncell(a)
directions <- 8

# Transparency involves putting 2 more hex digits on the color code, 00 is fully transparent
setColors(hab) <- paste(c("#000000",brewer.pal(8,"Greys")),c("00",rep("FF",8)),sep="")

#dev(4)
Plot(hab,new=TRUE,speedup=3) # note speedup is equivalent to making pyramids,
                             # so, some details are lost

# initiate 10 fires at to loci
fires <- spread(hab, loci=as.integer(sample(1:ncell(hab), 10)),
                0.235, 0, NULL, 1e8, 8, 1e6, mapID=TRUE)
#set colors, adding a transparency factor... i.e., the last 2 characters of an 8 character
#  hex code are transparency, from 00 (fully transparent) to FF (fully opaque)
#  Here, we are using only the darkest end of the Red palette (i.e., of 8 reds,
#  use the 5:8 ones)
setColors(fires)<-paste(c("#000000",brewer.pal(8,"Reds")[5:8]),c("00",rep("FF",4)),sep="")
Plot(fires,addTo="hab",speedup=3)
}
\author{
Steve Cumming \email{Steve.Cumming@sbf.ulaval.ca}

Eliot McIntire
}

