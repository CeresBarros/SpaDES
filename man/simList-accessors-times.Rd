% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/simList.R, R/times.R
\docType{methods}
\name{times}
\alias{.moduleTimeunit}
\alias{.moduleTimeunit,NULL-method}
\alias{.moduleTimeunit,simList-method}
\alias{convertTimeunit,numeric,character-method}
\alias{end}
\alias{end,simList,character-method}
\alias{end,simList,missing-method}
\alias{end<-}
\alias{end<-,simList-method}
\alias{simList-accessors-times}
\alias{start}
\alias{start,simList,character-method}
\alias{start,simList,missing-method}
\alias{start<-}
\alias{start<-,simList-method}
\alias{time}
\alias{time,simList,character-method}
\alias{time,simList,missing-method}
\alias{time<-}
\alias{time<-,simList-method}
\alias{times}
\alias{times,simList-method}
\alias{times<-}
\alias{times<-,simList-method}
\alias{timeunit}
\alias{timeunit,simList-method}
\alias{timeunit<-}
\alias{timeunit<-,simList-method}
\alias{timeunits}
\alias{timeunits,simList-method}
\title{Get and set simulation times.}
\usage{
times(x, ...)

\S4method{times}{simList}(x)

times(x) <- value

\S4method{times}{simList}(x) <- value

time(x, unit, ...)

\S4method{time}{simList,missing}(x)

\S4method{time}{simList,character}(x, unit)

time(x) <- value

\S4method{time}{simList}(x) <- value

end(x, unit, ...)

\S4method{end}{simList,missing}(x)

\S4method{end}{simList,character}(x, unit)

end(x) <- value

\S4method{end}{simList}(x) <- value

start(x, unit, ...)

\S4method{start}{simList,missing}(x)

\S4method{start}{simList,character}(x, unit)

start(x) <- value

\S4method{start}{simList}(x) <- value

.moduleTimeunit(object)

\S4method{.moduleTimeunit}{simList}(object)

\S4method{.moduleTimeunit}{`NULL`}(object)

timeunit(object)

\S4method{timeunit}{simList}(object)

timeunit(object) <- value

\S4method{timeunit}{simList}(object) <- value

timeunits(object)

\S4method{timeunits}{simList}(object)

\S4method{convertTimeunit}{numeric,character}(time, unit)
}
\arguments{
\item{value}{The object to be stored at the slot.}

\item{unit}{character. One of the time units used in SpaDES.}

\item{object}{A \code{simList} simulation object.}

\item{unit}{character. One of the time units used in SpaDES.}

\item{unit}{character. One of the time units used in SpaDES.}
}
\value{
Returns or sets the value of the slot from the \code{simList} object.
}
\description{
Accessor functions for the \code{simtimes} slot of a \code{simList} object
and its elements.
Additonal methods are provided to access the current, start, and stop times
of the simulation.
\tabular{ll}{
   \code{time} \tab Current simulation time.\cr
   \code{start} \tab Simulation start time.\cr
   \code{end} \tab Simulation stop time.\cr
   \code{times} \tab List of all simulation times (current, start, stop).\cr
}
}
\details{
Currently, only get and set methods are defined. Subset methods are not.

\code{timeunit} will extract the current units of the time used in a spades call. If
it is set within a \code{simInit} as say, \code{times=list(start=0, stop=52, timestepUnit="week")}
it will set the units for that simulation. But default, a simInit call will use the largest
units contained within the meta data for the modules being used. NA for timestepUnit defaults to
"year"

\code{timeunits} will extract the current units of the time of all
modules used in a simObject. This is different from \code{simTimestepUnits} because it
is not necessarily associated with a spades call
}
\author{
Alex Chubaty and Eliot McIntire

Eliot McIntire
}
\seealso{
\code{\link{simList-class}},
         \code{\link{simList-accessors-envir}},
         \code{\link{simList-accessors-modules}},
         \code{\link{simList-accessors-params}},
         \code{\link{simList-accessors-events}}.
}

