* using log directory 'C:/Users/achubaty/Documents/GitHub/SpaDES.Rcheck'
* using R version 3.1.1 (2014-07-10)
* using platform: x86_64-w64-mingw32 (64-bit)
* using session charset: ASCII
* checking for file 'SpaDES/DESCRIPTION' ... OK
* checking extension type ... Package
* this is package 'SpaDES' version '0.3.1'
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking whether package 'SpaDES' can be installed ... [14s] OK
* checking installed package size ... OK
* checking package directory ... OK
* checking 'build' directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... WARNING
Empty or missing file 'demo/00Index'.
See the information on INDEX files and package subdirectories in the
chapter 'Creating R packages' of the 'Writing R Extensions' manual.
* checking package subdirectories ... OK
* checking R files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking dependencies in R code ... NOTE
Namespace in Imports field not imported from: 'methods'
  All declared Imports should be used.
See the information on DESCRIPTION files in the chapter 'Creating R
packages' of the 'Writing R Extensions' manual.
* checking S3 generic/method consistency ... OK
* checking replacement functions ... WARNING
  'setColors<-' '\S4method{setColors<-}{Raster,list,missing}'
  '\S4method{setColors<-}{Raster,list,numeric}'
  '\S4method{setColors<-}{RasterLayer,character,missing}'
  '\S4method{setColors<-}{RasterLayer,character,numeric}'
The argument of a replacement function which corresponds to the right
hand side must be named 'value'.
* checking foreign function calls ... OK
* checking R code for possible problems ... NOTE
Found an obsolete/platform-specific call in the following function:
  'newPlot'
Found the platform-specific devices:
  'quartz' 'windows' 'x11'
dev.new() is the preferred way to open a new device, in the unlikely
event one is needed.
cir: no visible binding for global variable 'angles'
cir: no visible binding for global variable 'x'
cir: no visible binding for global variable 'y'
cir: no visible binding for global variable 'pixIDs'
cir: no visible binding for global variable 'pixIDs.unq'
doEvent.progress: no visible binding for '<<-' assignment to '.pb'
newProgressBar: no visible global function definition for
  'tkProgressBar'
setProgressBar: no visible global function definition for
  'setTkProgressBar'
spec.num.per.patch: no visible binding for global variable 'pops'
spec.num.per.patch: no visible binding for global variable 'num.in.pop'
doEvent,simList-logical: no visible binding for global variable
  'eventTime'
loadFiles,simList-missing: no visible global function definition for
  'error'
show,simList: no visible binding for global variable 'objectNames'

Found the following assignments to the global environment:
File 'SpaDES/R/checkpoint.R':
  assign("rng.state", get(".Random.seed", .GlobalEnv), .GlobalEnv)
  assign("rng.kind", RNGkind(), .GlobalEnv)
File 'SpaDES/R/load.R':
  assign(objectNames[x], do.call(get(loadFun[x]), args = argument), 
    envir = .GlobalEnv)
  assign(uniqueStacki, localStacks[[uniqueStacki]], envir = .GlobalEnv)
File 'SpaDES/R/plotting.R':
  assign(".arr", arr, envir = .GlobalEnv)
* checking Rd files ... OK
* checking Rd metadata ... OK
* checking Rd cross-references ... WARNING
Missing link or links in documentation object 'RasterStackNamed-class.Rd':
  'RasterStack'

Missing link or links in documentation object 'dev-method.Rd':
  'quartz'

Missing link or links in documentation object 'getColors-method.Rd':
  'setColors'

Missing link or links in documentation object 'newPlot-method.Rd':
  'quartz'

See the information in section 'Cross-references' of the 'Writing R
Extensions' manual.

* checking for missing documentation entries ... WARNING
Undocumented code objects:
  'makeLayout' 'makeViewports'
Undocumented S4 classes:
  'NamedSpatialPoints' 'spatialObjects'
Undocumented S4 methods:
  generic 'Plot' and siglist 'spatialObjects'
  generic 'inRasterStack' and siglist 'list'
  generic 'name<-' and siglist 'RasterStack'
  generic 'name<-' and siglist 'RasterStackNamed'
  generic 'name<-' and siglist 'SpatialPoints'
  generic 'name<-' and siglist 'SpatialPointsDataFrame'
  generic 'name<-' and siglist 'SpatialPointsDataFrameNamed'
  generic 'name<-' and siglist 'SpatialPointsNamed'
  generic 'nlayers' and siglist 'list'
  generic 'setColors<-' and siglist 'Raster,list,missing'
  generic 'setColors<-' and siglist 'Raster,list,numeric'
  generic 'setColors<-' and siglist 'RasterLayer,character,missing'
  generic 'setColors<-' and siglist 'RasterLayer,character,numeric'
  generic 'spread' and siglist 'RasterLayer'
All user-level objects in a package (including S4 classes and methods)
should have documentation entries.
See the chapter 'Writing R documentation files' in the 'Writing R
Extensions' manual.
* checking for code/documentation mismatches ... WARNING
Codoc mismatches from documentation object 'setColors<-':
setColors<-
  Code: function(object, ..., value, n)
  Docs: function(object, ..., n, value)
  Mismatches in argument names:
    Position: 3 Code: value Docs: n
    Position: 4 Code: n Docs: value

* checking Rd \usage sections ... WARNING
Undocumented arguments in documentation object 'Plot'
  'add' 'cols'
Duplicated \argument entries in documentation object 'Plot':
  'axes'
Documented arguments not in \usage in documentation object 'Plot':
  'col'

Undocumented arguments in documentation object 'SpatialPointsDataFrameNamed'
  'object' 'value'

Undocumented arguments in documentation object 'adj.raw'
  'sort' 'target'

Undocumented arguments in documentation object 'arrangeViewports'
  'extents' 'name'
Documented arguments not in \usage in documentation object 'arrangeViewports':
  'toPlot' 'axes'

Documented arguments not in \usage in documentation object 'cir':
  'scaleRaster'

Undocumented arguments in documentation object 'move'
  'hypothesis' '...'
Duplicated \argument entries in documentation object 'move':
  'agent'

Undocumented arguments in documentation object 'equalExtent'
  'extents'

Undocumented arguments in documentation object 'getColors'
  'object'
Documented arguments not in \usage in documentation object 'getColors':
  'x'

Undocumented arguments in documentation object 'inRasterStack'
  'object'
Objects in \usage without \alias in documentation object 'inRasterStack':
  '\S4method{inRasterStack}{list}'

Undocumented arguments in documentation object 'layerNames'
  'object'

Undocumented arguments in documentation object 'name'
  'object'

Undocumented arguments in documentation object 'plotGrob'
  'col' 'size' 'legend' 'draw' 'gp' 'vp' 'pch' 'maxpixels' 'childrenvp'
  '...'

Undocumented arguments in documentation object 'setColors<-'
  'object'
Documented arguments not in \usage in documentation object 'setColors<-':
  'x'

Objects in \usage without \alias in documentation object 'spread':
  '\S4method{spread}{RasterLayer}'

Functions with \usage entries need to have the appropriate \alias
entries, and all their arguments documented.
The \usage entries must correspond to syntactically valid R code.
See the chapter 'Writing R documentation files' in the 'Writing R
Extensions' manual.
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking installed files from 'inst/doc' ... OK
* checking files in 'vignettes' ... OK
* checking examples ... OK
* checking for unstated dependencies in tests ... OK
* checking tests ... OK
  Running 'test-all.R'
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes in 'inst/doc' ... OK
* checking running R code from vignettes ... ERROR
Errors in running code in vignettes:
when running code in 'introduction.Rnw'
  ...
> path <- system.file("sampleModules", package = "SpaDES")

> mySim <- simInit(times = times, params = parameters, 
+     modules = modules, path = path)
Warning in file(filename, "r", encoding = encoding) :
  cannot open file '/randomLandscapes.R': No such file or directory

  When sourcing 'introduction.R':
Error: cannot open the connection
Execution halted
when running code in 'modules.Rnw'
  ...
> path <- system.file("sampleModules", package = "SpaDES")

> mySim <- simInit(times = times, params = parameters, 
+     modules = modules, path = path)
Warning in file(filename, "r", encoding = encoding) :
  cannot open file '/randomLandscapes.R': No such file or directory

  When sourcing 'modules.R':
Error: cannot open the connection
Execution halted

