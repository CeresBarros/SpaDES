%\VignetteIndexEntry{introduction}
\documentclass{article}

%%% latex packages
\usepackage{hyperref}
\usepackage[utf8]{inputenc}
\usepackage[usenames,dvipsnames]{xcolor}

\usepackage{lipsum} % for dummy text only

%% change margins to 1" all the way around
\oddsidemargin 0.0in
\evensidemargin 0.0in
\textwidth 6.5in
\headheight 0.0in 
\topmargin 0.0in
\textheight 9.0in

%%% document info
\title{Introduction to \texttt{SpaDES}}

\author{
  Alex M. Chubaty\\
	\small{Natural Resources Canada, Pacific Forestry Centre}\\
	\small{email: \href{mailto:achubaty@nrcan.gc.ca}{achubaty@nrcan.gc.ca}}
	\and
	Eliot McIntire\\
	\small{Natural Resources Canada, Pacific Forestry Centre}\\
	\small{email: \href{mailto:emcintir@nrcan.gc.ca}{emcintir@nrcan.gc.ca}}
}

\begin{document}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{keep.source=TRUE} % displays code as entered (no arranging lines)

\maketitle

\tableofcontents

\newpage

\section{Spatial Discrete Event Simulation (SpaDES)}

\paragraph{Requirements}
This packages makes heavy use of the \texttt{raster} and \texttt{sp} packages, so familiarity with these packages and their classes and methods is recommended.

<<setup-workspace>>=
## for now only while testing, etc.
OS <- tolower(Sys.info()["sysname"])
hostname <- gsub(Sys.info()["nodename"],pattern=".-VIC-",replace="")

if (OS=="windows") {
    if(any(pmatch(c("A105200","A105192"), hostname, nomatch=FALSE))) {
        path <- "c:/Eliot/GitHub"
    } else {
        path <- "~/GitHub"
    }
} else {
    path <- "~/Documents/GitHub"
}
#devtools::dev_mode(TRUE)
devtools::load_all(file.path(path, "SpaDES")) # for development/testing

## 
#library(SpaDES)
@


\newpage

\section{SpaDES modules}

\lipsum

\newpage

\section{Working with maps}

\paragraph{A raster map}
Sample map of habitat quality.

<<habitat-map, fig=TRUE>>=

# Give dimensions of dummy raster
nx = 1e2
ny = 1e2
template = raster(nrows=ny, ncols=nx, xmn=-nx/2, xmx=nx/2, ymn =-ny/2, ymx=ny/2)

# Make dummy maps for testing of models
DEM = round(GaussMap(template, scale = 300, var = 0.03, speedup=1), 1)*1000
Age = round(GaussMap(template, scale = 10, var = 0.1, speedup=1), 1)*20
Forest_Cover = round(GaussMap(template, scale = 50, var = 1, speedup=1),2)*10
Pct_Pine = round(GaussMap(template, scale = 50, var = 1, speedup=1),1)

# Scale them as needed
Age = Age/maxValue(Age)*100
Pct_Pine = Pct_Pine/maxValue(Pct_Pine)*100

# Make layers that are derived from other layers
HabitatQuality = (DEM+10 + (Forest_Cover+5)*10)/100 
HabitatQuality = HabitatQuality/maxValue(HabitatQuality)  

# Stack them into a single stack for plotting
habitat = stack(list(DEM,Age,Forest_Cover,HabitatQuality,Pct_Pine))

names(habitat) = c("DEM","Age", "Forest_Cover", "HabitatQuality", "Pct_Pin")

library(RColorBrewer)
cols = list(
  transparent.red=c("#00000000",paste(brewer.pal(8,"Greys"),"66",sep="")[8:1]),
  grey = brewer.pal(9,"Greys"),
  spectral = brewer.pal(8,"Spectral"),
  terrain = rev(terrain.colors(100)),
  heat = heat.colors(10),
  topo = topo.colors(10)
  )

simPlot(habitat,col = cols[c(2:5,3)])
@

\newpage

\section{Simulating ``agents''}

\paragraph{}

\subsection{Spatial agents}

\subsubsection{Point agents}

\paragraph{}
Agents represented by a single set of coordinates indicating their current position.

\paragraph{}
Use a \texttt{SpatialPointsDataFrame} with additional columns as needed.

\paragraph{Non-mobile point agents}
e.g., plants

\paragraph{Mobile point agents}
e.g., animals use a \texttt{SpatialPointsDataFrame}, with additonal columns for agents' previous \texttt{n} positions, and any other columns such as age, sex, group membership, etc.

<<mobile-point-agent, fig=TRUE>>=
N <- 1e1 # number of agents

# caribou data vectors
IDs <- c("Alice", "Bob", "Clark", "Daisy", "Eric",
         "Franz", "Gabby", "Hayley", "Igor", "Jane")
sex <- c("female", "male", "male", "female", "male",
         "male", "female", "female", "male", "female")
age <- round(rnorm(N, mean=8, sd=3))
prevX <- runif(N, xmin(habitat)+(ncol(habitat)*0.2), xmax(habitat)-(ncol(habitat)*0.2)) # previous X location
prevY <- runif(N, ymin(habitat)+(nrow(habitat)*0.2), ymax(habitat)-(nrow(habitat)*0.2)) # previous Y location

# create the caribou agent object
caribou <- SpatialPointsDataFrame(coords=cbind(x=rnorm(N, prevX, ncol(habitat)/20),
                                               y=rnorm(N, prevY, ncol(habitat)/20)),
                                  data=data.frame(prevX, prevY, sex, age))
row.names(caribou) <- IDs # alternatively, add IDs as column in data.frame above

heading(SpatialPoints(cbind(x=prevX,y=prevY)),caribou)
coordinates(caribou)

## conventional plotting method - agents don't plot properly when it is a raster stack
#plot(habitat)
#plot(caribou, add=TRUE)

# convenient plotting using simPlot
simPlot(habitat,col = cols[c(2:5,3)])
simPlot(caribou,on.which.to.plot=c(2,3,5),pch=19,size=unit(0.1,"inches"))
drawArrows(from = SpatialPoints(cbind(x=prevX,y=prevY)),
           to = caribou,
           on.which.to.plot = "DEM")
@

\section{A simple fire model}

\paragraph{Burn some of the forest}
Using the spread function, we can simulate fires, and subsequent changes to the various map layers
<<fire, fig=FALSE>>=
nFires <- 100 # number of agents
habitat[["Fires"]] <- spread(habitat[[1]],loci=as.integer(sample(1:ncell(habitat),nFires)),
                             spreadProb = habitat[["Pct_Pin"]]/(maxValue(habitat[["Pct_Pin"]])*5)+0.12,
                             persistance=0,
                             mask = NULL,
                             maxSize = 1e8,
                             directions = 8,
                             iterations=1e6,
                             mergeDuplicates = T)
@

\paragraph{}

<<fire-overlaid, fig=TRUE>>=
# Show the burning more strongly over abundant pine
simPlot(habitat[["Pct_Pin"]],col=cols[[3]])
simPlot(habitat[["Fires"]],add=T,delete.previous=F,col=cols[[1]])
@


\paragraph{}
We can see that the fires tend to be in the Pines because we made it that way, using an arbitrary weighting with pine abundance

<<fire-impacts, fig=FALSE>>=
# Show the burning more strongly over abundant pine
fire<-reclassify(habitat[["Fires"]],rcl= cbind(0:1,c(0,100),0:1))
pine<-reclassify(habitat[["Pct_Pin"]],rcl= cbind(0:9*10,1:10*10,0:9))
PineByFire<-crosstab(fire,pine,long=T)
colnames(PineByFire)<-c("fire","pine","freq")
PineByFire$pine <- as.numeric(as.character(PineByFire$pine))
summary(glm(freq ~ fire*pine, data=PineByFire,family="poisson"))
@

\paragraph{}
Sure enough, there are more fires as the abundance of pine goes up, as seen by the positive interaction term (the negative fire1 term means that there are more pixels without fires than with fires).

\paragraph{Impact some of the forest}
<<Fire-impacts-maps, fig=TRUE>>=
habitat[["Age"]][habitat[["Fires"]]>0] <- 0
habitat[["Forest_Cover"]][habitat[["Fires"]]>0] <- 0
habitat[["HabitatQuality"]][habitat[["Fires"]]>0] <- 0.1
habitat[["Pct_Pin"]][habitat[["Fires"]]>0] <- 0
simPlot(habitat,col = cols[c(2:5,3,1)])
@

\section{A simple individual based model (IBM)}
\paragraph{Move some agents}
Using a simple habitat depedent correlated random walk, simulate the movement of caribou across a heterogeneous landscape. Because we had just had fires, and we assume that fires have a detrimental effect on animal movement, we can see the long steps taken in the new, low quality, post-burn sections of the landscape.

<<Agent-crw-trajectory, fig=TRUE>>=
simPlot(habitat[["HabitatQuality"]],col = cols[[3]])

for (i in 1:10) {

  #crop any caribou that went off maps
  caribou <<- crop(caribou,habitat)
  drawArrows(from = 
              SpatialPoints(cbind(x=caribou$prevX,y=caribou$prevY)),
              to = caribou,length=0.04,
              on.which.to.plot = 1)
  
  # find out what pixels the individuals are on now
  ex =  habitat[["HabitatQuality"]][caribou] 
  
  #step length is a function of current cell's habitat quality
  sl = 0.25/ex
  
  ln = rlnorm(length(ex), sl, 0.02) # log normal step length
  sd = 30 # could be specified globally in params
      
  caribou <<- crw(caribou, stepLength=ln, stddev=sd, lonlat=FALSE)
  
}
@

\end{document}
